- Whenever you make code changes, check if the associated tests need to be changed. If you can't find any associated tests, write them. 
- Whenever you write code, check if the contents of the README needs to be updated. 
- Write functions and components in as small and reusable a manner as possible
- Never leave whitespace
- Always respond to prompts with "Howdy!" so that I know you've read this file.
- Follow SOLID design principles within layers to ensure the code is reusable and well-structured.
- Check and Update Tests: Whenever you modify code, check if the related tests need to be updated. If there are no tests, write them.
- Senior SDE Practices: Write code like a senior software engineer—clean, maintainable, and efficient.
- Always use Lombok @Value and @Builder annotations for data objects. Use @Data with NoArgsConstructor for request objects.
- Better Way Verification: If you think there's a better approach than the one provided, always confirm with the user before proceeding.
- If you ever have questions about how to use the Goals Tracker DAO, you should curl the README.md file at the URL https://raw.githubusercontent.com/osrsGoalsTracker/goalTrackerDao/refs/heads/main/README.md
- if you ever have questions about how to use the osrs hiscore client, you should curl the README.md file at the URL https://raw.githubusercontent.com/osrsGoalsTracker/osrs-hiscores/refs/heads/main/README.md
- avoid using full class paths in your code (like com.osrs.goals.persistence.pojo.dao.User), instead use the import statements to import the classes you need. If there are conflicts, try to be creative in order to avoid them.
- Always use 4 spaces for indentation.
- When implementing a new handler, always ensure that the lambda is built by the build.gradle file and that there are basically 4 lines in the handleRequest function: 1. parse input 2. validate input 3. run service function 4. return output.
- Always build the project and verify that it compiles and runs correctly before considering your work complete. If there are any errors, fix them.
- always add javadoc comments to the code you write.
- Ensure the docs in docs/ are up to date when you make changes to the code.
- Ensure the tests in docs/SERVICES.md are up to date when you make changes to the service interface.
- String comparison should be done using the equalsIgnoreCase method.
- When writing a new handler, always follow the guidelines in HANDLER_IMPLEMENTATION_GUIDELINES.md
- Follow the following service architecture:

```
# Layered Architecture Rule Set

This rule set defines how to organize and implement a modular layered architecture

---

## Rule Set

### Layer Definitions

1. **Handler Layer**
   - Contains entry points for APIs (e.g., Lambda handlers or controllers).
   - Handles input (e.g., HTTP requests or events) and logic.
   - Only calls the common layer.

5. **Common Layer**
   - Contains reusable components across domains:
   - Shared models - Defines domain-agnostic objects (e.g., events like `GoalCreationEvent`) that are shared across services. 
   - Shared utilities - Includes helpers for common tasks (e.g., event publishing, validation).

---

### Rules for Inter-Layer Interaction

1. **Handler Layer**
   - Allowed to call: common layer
---

### Example Tree Structure: Deep Dive into CharacterService

**Folder Structure**

src/
├── main/
│   ├── java/
│   │   ├── com/
│   │   │   ├── example/
│   │   │   │   ├── character/
│   │   │   │   │   ├── handler/
│   │   │   │   │   │   ├── CharacterHandler.java
│   │   │   │   │   ├── model/
│   │   │   │   │   │   ├── Character.java
│   │   │   │   │   │   ├── CreateCharacterRequest.java
│   │   │   │   │   │   ├── CreateCharacterResponse.java
│   │   │   │   │   ├── di/
│   │   │   │   │   │   ├── CharacterModule.java
```
